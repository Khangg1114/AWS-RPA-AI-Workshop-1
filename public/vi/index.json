[
{
	"uri": "/vi/",
	"title": "Nền tảng RPA đơn giản với AI trên AWS",
	"tags": [],
	"description": "",
	"content": "Xây dựng Nền tảng RPA đơn giản với AI trên AWS Tổng quan Trong workshop này, bạn sẽ xây dựng một nền tảng Robotic Process Automation (RPA) đơn giản được tăng cường với khả năng AI sử dụng các dịch vụ AWS. Bạn sẽ tạo một hệ thống tự động hóa cơ bản có thể:\nXử lý tài liệu tự động bằng AI Trích xuất dữ liệu từ hóa đơn và biểu mẫu Gửi email tự động Giám sát và ghi log tất cả hoạt động Mở rộng theo khối lượng công việc Những gì bạn sẽ xây dựng Một nền tảng RPA đơn giản với các thành phần:\nDocument Processing Bot: Sử dụng Amazon Textract để trích xuất dữ liệu từ PDF Email Automation Bot: Gửi phản hồi tự động bằng SES Data Processing: Lưu trữ và xử lý dữ liệu trong DynamoDB Monitoring Dashboard: Metrics và alarms của CloudWatch Các dịch vụ AWS được sử dụng AWS Lambda: Các hàm serverless cho RPA bots Amazon Textract: Xử lý tài liệu AI Amazon SES: Tự động hóa email Amazon DynamoDB: Lưu trữ dữ liệu Amazon S3: Lưu trữ file Amazon CloudWatch: Giám sát và logging Chi phí ước tính: $5-10. Nhớ dọn dẹp tài nguyên sau khi hoàn thành.\nYêu cầu tiên quyết Tài khoản AWS với quyền cơ bản Kiến thức cơ bản về Python Text editor hoặc IDE Cấu trúc Workshop Thiết lập môi trường AWS Tạo Document Processing Bot Xây dựng Email Automation Bot Dọn dẹp tài nguyên Mục tiêu học tập Sau khi hoàn thành workshop này, bạn sẽ:\nHiểu các khái niệm và triển khai RPA Biết cách tích hợp dịch vụ AI với tự động hóa Có thể xây dựng các giải pháp tự động hóa serverless Hiểu về giám sát và logging của AWS "
},
{
	"uri": "/vi/1-setup/",
	"title": "Thiết lập Môi trường AWS",
	"tags": [],
	"description": "",
	"content": "Tổng quan Thiết lập môi trường AWS với các dịch vụ và quyền cần thiết cho nền tảng RPA.\nNhững gì bạn sẽ tạo S3 bucket để lưu trữ tài liệu DynamoDB table để lưu trữ dữ liệu IAM roles và policies Cấu hình email SES Các bước thực hiện Tạo S3 Bucket Tạo DynamoDB Table Thiết lập Amazon SES Tạo IAM Role Bước 5: Xác minh thiết lập Kiểm tra bạn đã tạo:\n✅ S3 bucket: rpa-documents-[your-name] ✅ DynamoDB table: rpa-processed-data ✅ Email đã verify trong SES ✅ IAM role: RPA-Lambda-Role Kết quả mong đợi Môi trường AWS của bạn đã sẵn sàng với:\nLưu trữ cho tài liệu và dữ liệu Dịch vụ email đã cấu hình Quyền phù hợp cho Lambda functions Ghi lại tên S3 bucket và địa chỉ email đã verify - bạn sẽ cần chúng ở các bước tiếp theo!\n"
},
{
	"uri": "/vi/1-setup/1.1-create-s3-bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tạo Amazon S3 bucket để lưu trữ tài liệu sẽ được xử lý bởi hệ thống RPA của chúng ta.\nHướng dẫn từng bước Bước 1: Điều hướng đến dịch vụ S3 Mở AWS Management Console Trong thanh tìm kiếm, gõ S3 Click vào Amazon S3 từ kết quả Bước 2: Tạo bucket mới Click nút Create bucket Bạn sẽ thấy trang cấu hình \u0026ldquo;Create bucket\u0026rdquo; Bước 3: Cấu hình cài đặt bucket Tên bucket:\nNhập: rpa-documents-[your-name] Thay [your-name] bằng tên thật hoặc chữ cái viết tắt của bạn Ví dụ: rpa-documents-fcj Lưu ý: Tên bucket phải duy nhất toàn cầu AWS Region:\nChọn ap-southeast-1 Region này có hỗ trợ tốt nhất cho tất cả dịch vụ chúng ta sẽ sử dụng Bước 4: Cấu hình tùy chọn Object Ownership:\nGiữ mặc định: ACLs disabled (recommended) Block Public Access settings:\nGiữ tất cả checkbox được tích (điều này bảo mật) Chúng ta không cần public access cho workshop này Bucket Versioning:\nGiữ Disable (mặc định) Default encryption:\nGiữ Amazon S3 managed keys (SSE-S3) (mặc định) Bước 5: Tạo bucket Cuộn xuống và click Create bucket Bạn sẽ thấy thông báo thành công Bucket của bạn sẽ xuất hiện trong danh sách S3 buckets Bước 6: Xác minh tạo bucket Tìm bucket của bạn trong danh sách: rpa-documents-[your-name] Click vào tên bucket để mở nó Bạn sẽ thấy bucket trống với các tab: Objects, Properties, Permissions, v.v. Bước 7: Tạo cấu trúc thư mục Bên trong bucket của bạn, click Create folder Tên thư mục: documents Click Create folder Điều này sẽ giúp sắp xếp các file được upload Ghi lại tên bucket chính xác - bạn sẽ cần nó ở các bước sau!\n"
},
{
	"uri": "/vi/1-setup/1.2-create-dynamodb/",
	"title": "Tạo DynamoDB Table",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tạo Amazon DynamoDB table để lưu trữ dữ liệu tài liệu đã xử lý từ hệ thống RPA của chúng ta.\nHướng dẫn từng bước Bước 1: Điều hướng đến dịch vụ DynamoDB Trong AWS Management Console Tìm kiếm DynamoDB trong thanh tìm kiếm Click vào Amazon DynamoDB từ kết quả Bước 2: Tạo table mới Click nút Create table Bạn sẽ thấy trang cấu hình \u0026ldquo;Create table\u0026rdquo; Bước 3: Cấu hình cài đặt table Tên table:\nNhập: rpa-processed-data Đây sẽ lưu trữ tất cả thông tin tài liệu đã xử lý của chúng ta Partition key:\nTên key: document_id Loại: String Đây sẽ là mã nhận dạng duy nhất cho mỗi tài liệu đã xử lý Bước 4: Cài đặt table Cài đặt table:\nGiữ Default settings được chọn Điều này sẽ sử dụng on-demand billing (trả theo sử dụng) Secondary indexes:\nĐể trống (chúng ta không cần cho workshop này) Encryption at rest:\nGiữ Owned by Amazon DynamoDB (mặc định) Điều này cung cấp mã hóa mà không tốn thêm chi phí Bước 5: Tạo table Cuộn xuống và click Create table Bạn sẽ thấy trạng thái \u0026ldquo;Creating table\u0026hellip;\u0026rdquo; Chờ trạng thái table chuyển thành Active (thường mất 1-2 phút) Bước 6: Xác minh tạo table Bạn sẽ thấy table rpa-processed-data của mình trong danh sách tables Click vào tên table để xem chi tiết Kiểm tra tab General information: Status nên là Active Partition key nên là document_id (S) Bước 7: Khám phá cấu trúc table Click vào tab Explore table items Bạn sẽ thấy \u0026ldquo;No items to display\u0026rdquo; - điều này bình thường cho table mới Lưu ý dropdown Actions - chúng ta sẽ dùng nó sau để test Tên table rpa-processed-data sẽ được sử dụng trong Lambda functions - nhớ chính xác tên này!\n"
},
{
	"uri": "/vi/1-setup/1.3-setup-ses/",
	"title": "Thiết lập Amazon SES",
	"tags": [],
	"description": "",
	"content": "Tổng quan Cấu hình Amazon Simple Email Service (SES) để gửi thông báo email tự động từ hệ thống RPA của chúng ta.\nHướng dẫn từng bước Bước 1: Điều hướng đến Amazon SES Trong AWS Management Console Tìm kiếm SES trong thanh tìm kiếm Click vào Amazon Simple Email Service từ kết quả Bước 2: Xác minh địa chỉ email của bạn Trong SES console, click Verified identities ở menu bên trái Click nút Create identity Bạn sẽ thấy trang cấu hình \u0026ldquo;Create identity\u0026rdquo; Bước 3: Cấu hình email identity Loại identity:\nChọn Email address (không phải domain) Địa chỉ email:\nNhập địa chỉ email cá nhân của bạn Ví dụ: your-email@gmail.com Đây sẽ được sử dụng để gửi và nhận thông báo RPA Default configuration set:\nĐể trống (chúng ta không cần cho workshop này) Bước 4: Tạo identity Click nút Create identity Bạn sẽ thấy thông báo thành công Email của bạn sẽ xuất hiện trong danh sách identities với trạng thái Unverified Bước 5: Xác minh email của bạn Kiểm tra hộp thư email của bạn (bao gồm thư mục spam) Tìm email từ Amazon Web Services Tiêu đề: \u0026ldquo;Amazon SES Address Verification Request in region\u0026hellip;\u0026rdquo; Click vào liên kết xác minh trong email Bạn sẽ thấy trang xác nhận trong trình duyệt Bước 6: Xác nhận xác minh Quay lại SES console Refresh trang Trạng thái email của bạn bây giờ nên hiển thị Verified với dấu tích xanh Nếu vẫn chưa verified, chờ vài phút và refresh lại "
},
{
	"uri": "/vi/1-setup/1.4-create-iam-role/",
	"title": "Tạo IAM Role",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tạo IAM role cấp quyền cho Lambda functions truy cập các dịch vụ S3, DynamoDB, Textract, và SES.\nHướng dẫn từng bước Bước 1: Điều hướng đến dịch vụ IAM Trong AWS Management Console Tìm kiếm IAM trong thanh tìm kiếm Click vào IAM từ kết quả Bước 2: Tạo role mới Trong IAM console, click Roles ở menu bên trái Click nút Create role Bạn sẽ thấy trang \u0026ldquo;Create role\u0026rdquo; Bước 3: Chọn trusted entity Trusted entity type:\nChọn AWS service (nên được chọn mặc định) Use case:\nChọn Lambda từ danh sách Điều này cho phép các Lambda functions assume role này Bước 4: Thêm permissions Click Next để đến trang permissions Bạn sẽ thấy hộp tìm kiếm để tìm policies Chúng ta cần attach nhiều policies cho hệ thống RPA Tìm kiếm và chọn các policies này từng cái một:\nAWSLambdaBasicExecutionRole\nTìm kiếm: AWSLambdaBasicExecutionRole Tích vào ô bên cạnh nó Điều này cho phép Lambda ghi logs vào CloudWatch AmazonTextractFullAccess\nTìm kiếm: AmazonTextractFullAccess Tích vào ô bên cạnh nó Điều này cho phép Lambda sử dụng Textract cho xử lý tài liệu AmazonSESFullAccess\nTìm kiếm: AmazonSESFullAccess Tích vào ô bên cạnh nó Điều này cho phép Lambda gửi emails qua SES AmazonDynamoDBFullAccess\nTìm kiếm: AmazonDynamoDBFullAccess Tích vào ô bên cạnh nó Điều này cho phép Lambda đọc/ghi DynamoDB tables AmazonS3FullAccess\nTìm kiếm: AmazonS3FullAccess Tích vào ô bên cạnh nó Điều này cho phép Lambda đọc files từ S3 Bước 5: Xem lại các policies đã chọn Bạn nên có 5 policies được chọn:\n✅ AWSLambdaBasicExecutionRole ✅ AmazonTextractFullAccess ✅ AmazonSESFullAccess ✅ AmazonDynamoDBFullAccess ✅ AmazonS3FullAccess Click Next để tiếp tục. Bước 6: Đặt tên và tạo role Tên role:\nNhập: RPA-Lambda-Role Tên này sẽ được sử dụng khi tạo Lambda functions Mô tả:\nNhập: Role for RPA Lambda functions with access to S3, DynamoDB, Textract, and SES Tags (tùy chọn):\nKey: Project, Value: RPA-Workshop Key: Purpose, Value: Lambda-Execution Bước 7: Tạo role Xem lại tất cả cài đặt: Trusted entity: Lambda Policies: 5 policies attached Tên role: RPA-Lambda-Role Click Create role Bạn sẽ thấy thông báo thành công Bước 8: Xác minh tạo role Bạn nên thấy RPA-Lambda-Role trong danh sách roles Click vào tên role để xem chi tiết Kiểm tra tab Permissions - bạn nên thấy tất cả 5 policies Kiểm tra tab Trust relationships - nên hiển thị Lambda service Tên role RPA-Lambda-Role sẽ được sử dụng khi tạo Lambda functions - nhớ chính xác tên này!\n"
},
{
	"uri": "/vi/2-document-bot/",
	"title": "Tạo Document Processing Bot",
	"tags": [],
	"description": "",
	"content": "Tổng quan Xây dựng Lambda function tự động xử lý tài liệu được upload lên S3 bằng Amazon Textract để trích xuất text và dữ liệu.\nNhững gì bạn sẽ xây dựng Lambda function được kích hoạt bởi S3 uploads Tích hợp với Amazon Textract cho AI document processing Trích xuất dữ liệu tự động từ invoices và forms Các bước thực hiện Tạo Lambda Function Thêm Code Xử lý Cấu hình S3 Trigger Test Document Processing Kết quả mong đợi Lambda function xử lý tài liệu tự động Textract trích xuất text và form data Kết quả được lưu trong DynamoDB Hệ thống sẵn sàng cho email automation Thử upload các loại tài liệu khác nhau để xem Textract xử lý các định dạng khác nhau như thế nào!\n"
},
{
	"uri": "/vi/2-document-bot/2.1-create-lambda/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tạo Lambda function đầu tiên sẽ tự động xử lý tài liệu được upload lên S3 bằng Amazon Textract.\nHướng dẫn từng bước Bước 1: Điều hướng đến AWS Lambda Trong AWS Management Console Tìm kiếm Lambda trong thanh tìm kiếm Click vào AWS Lambda từ kết quả Bước 2: Tạo function mới Click nút Create function Bạn sẽ thấy trang \u0026ldquo;Create function\u0026rdquo; với các tùy chọn khác nhau Bước 3: Chọn phương thức tạo function Function creation method:\nChọn Author from scratch (nên được chọn mặc định) Điều này cho phép chúng ta viết code riêng Bước 4: Cấu hình thông tin cơ bản Function name:\nNhập: document-processor Tên này mô tả chức năng của function Runtime:\nChọn Python 3.9 từ dropdown Python rất tốt cho tích hợp AWS và dịch vụ AI Architecture:\nGiữ x86_64 (mặc định) Đây là kiến trúc tiêu chuẩn Bước 5: Cấu hình permissions Execution role:\nChọn Use an existing role Từ dropdown, chọn: RPA-Lambda-Role Đây là role chúng ta đã tạo ở bước trước Bước 6: Cài đặt nâng cao (tùy chọn) Enable function URL:\nĐể không tích (chúng ta không cần web URL cho function này) Enable tags:\nBạn có thể thêm tags nếu muốn: Key: Project, Value: RPA-Workshop Key: Function, Value: DocumentProcessor Bước 7: Tạo function Xem lại cài đặt của bạn: Function name: document-processor Runtime: Python 3.9 Execution role: RPA-Lambda-Role Click Create function Đợi function được tạo (thường mất 10-20 giây) Bước 8: Xác minh tạo function Bạn nên thấy dashboard Lambda function Ở trên cùng, bạn sẽ thấy: \u0026ldquo;Successfully created the function document-processor\u0026rdquo; Trạng thái function nên hiển thị Active Bước 9: Khám phá giao diện function Code tab:\nBạn sẽ thấy template code Python mặc định Chúng ta sẽ thay thế bằng code xử lý tài liệu ở bước tiếp theo Configuration tab:\nHiển thị cài đặt runtime, memory, timeout, v.v. Timeout mặc định là 3 giây (chúng ta sẽ tăng sau) Monitoring tab:\nSẽ hiển thị metrics khi function bắt đầu chạy Hiện tại trống vì chúng ta chưa chạy Tên function document-processor sẽ xuất hiện trong CloudWatch logs - nhớ điều này để debug!\n"
},
{
	"uri": "/vi/2-document-bot/2.2-add-code/",
	"title": "Thêm Code Xử lý",
	"tags": [],
	"description": "",
	"content": "Tổng quan Thêm Python code vào Lambda function sẽ sử dụng Amazon Textract để trích xuất text và dữ liệu từ tài liệu được upload.\nHướng dẫn Từng bước Bước 1: Mở Code Editor Trong Lambda function document-processor của bạn Đảm bảo bạn đang ở tab Code Bạn sẽ thấy code mặc định trong editor Bước 2: Xóa Code Mặc định Chọn tất cả code mặc định trong editor Xóa hoàn toàn Editor sẽ trống Bước 3: Thêm Code Xử lý Tài liệu Copy và paste code hoàn chỉnh này:\nimport json import boto3 import uuid from datetime import datetime from decimal import Decimal # Initialize AWS clients textract = boto3.client(\u0026#39;textract\u0026#39;) dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) s3 = boto3.client(\u0026#39;s3\u0026#39;) def lambda_handler(event, context): \u0026#34;\u0026#34;\u0026#34; Process documents uploaded to S3 using Textract \u0026#34;\u0026#34;\u0026#34; try: # Get S3 event details bucket = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;bucket\u0026#39;][\u0026#39;name\u0026#39;] key = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;object\u0026#39;][\u0026#39;key\u0026#39;] print(f\u0026#34;Processing document: {key} from bucket: {bucket}\u0026#34;) # Skip if file is not a document if not is_document_file(key): print(f\u0026#34;Skipping non-document file: {key}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({\u0026#39;message\u0026#39;: \u0026#39;File skipped - not a document\u0026#39;}) } # Use Textract to analyze the document response = textract.analyze_document( Document={ \u0026#39;S3Object\u0026#39;: { \u0026#39;Bucket\u0026#39;: bucket, \u0026#39;Name\u0026#39;: key } }, FeatureTypes=[\u0026#39;FORMS\u0026#39;, \u0026#39;TABLES\u0026#39;] ) # Extract text and key-value pairs extracted_data = extract_document_data(response) # Store results in DynamoDB table = dynamodb.Table(\u0026#39;rpa-processed-data\u0026#39;) document_id = str(uuid.uuid4()) table.put_item( Item={ \u0026#39;document_id\u0026#39;: document_id, \u0026#39;file_name\u0026#39;: key, \u0026#39;bucket_name\u0026#39;: bucket, \u0026#39;extracted_text\u0026#39;: extracted_data[\u0026#39;text\u0026#39;][:1000], # Limit text length \u0026#39;key_value_pairs\u0026#39;: extracted_data[\u0026#39;key_values\u0026#39;], \u0026#39;processed_at\u0026#39;: datetime.utcnow().isoformat(), \u0026#39;status\u0026#39;: \u0026#39;completed\u0026#39;, \u0026#39;confidence_score\u0026#39;: Decimal(str(extracted_data[\u0026#39;confidence\u0026#39;])) # Convert to Decimal for DynamoDB } ) print(f\u0026#34;Successfully processed document: {key}\u0026#34;) print(f\u0026#34;Document ID: {document_id}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;message\u0026#39;: \u0026#39;Document processed successfully\u0026#39;, \u0026#39;document_id\u0026#39;: document_id, \u0026#39;file\u0026#39;: key, \u0026#39;extracted_items\u0026#39;: len(extracted_data[\u0026#39;key_values\u0026#39;]) }) } except Exception as e: print(f\u0026#34;Error processing document: {str(e)}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;error\u0026#39;: str(e), \u0026#39;message\u0026#39;: \u0026#39;Failed to process document\u0026#39; }) } def is_document_file(filename): \u0026#34;\u0026#34;\u0026#34; Check if the file is a document that Textract can process \u0026#34;\u0026#34;\u0026#34; valid_extensions = [\u0026#39;.pdf\u0026#39;, \u0026#39;.png\u0026#39;, \u0026#39;.jpg\u0026#39;, \u0026#39;.jpeg\u0026#39;, \u0026#39;.tiff\u0026#39;, \u0026#39;.tif\u0026#39;] return any(filename.lower().endswith(ext) for ext in valid_extensions) def extract_document_data(textract_response): \u0026#34;\u0026#34;\u0026#34; Extract text and key-value pairs from Textract response \u0026#34;\u0026#34;\u0026#34; blocks = textract_response[\u0026#39;Blocks\u0026#39;] # Extract all text text_blocks = [block[\u0026#39;Text\u0026#39;] for block in blocks if block[\u0026#39;BlockType\u0026#39;] == \u0026#39;LINE\u0026#39;] full_text = \u0026#39; \u0026#39;.join(text_blocks) # Extract key-value pairs key_values = {} key_map = {} value_map = {} block_map = {} # Build block maps for block in blocks: block_id = block[\u0026#39;Id\u0026#39;] block_map[block_id] = block if block[\u0026#39;BlockType\u0026#39;] == \u0026#34;KEY_VALUE_SET\u0026#34;: if \u0026#39;KEY\u0026#39; in block[\u0026#39;EntityTypes\u0026#39;]: key_map[block_id] = block else: value_map[block_id] = block # Match keys with values for key_block_id, key_block in key_map.items(): value_block = find_value_block(key_block, value_map) if value_block: key_text = get_text(key_block, block_map).strip() value_text = get_text(value_block, block_map).strip() # Only store non-empty key-value pairs if key_text and value_text: key_values[key_text] = value_text # Calculate average confidence confidences = [block.get(\u0026#39;Confidence\u0026#39;, 0) for block in blocks if \u0026#39;Confidence\u0026#39; in block] avg_confidence = sum(confidences) / len(confidences) if confidences else 0 return { \u0026#39;text\u0026#39;: full_text, \u0026#39;key_values\u0026#39;: key_values, \u0026#39;confidence\u0026#39;: round(avg_confidence, 2) } def find_value_block(key_block, value_map): \u0026#34;\u0026#34;\u0026#34;Find the value block associated with a key block\u0026#34;\u0026#34;\u0026#34; for relationship in key_block.get(\u0026#39;Relationships\u0026#39;, []): if relationship[\u0026#39;Type\u0026#39;] == \u0026#39;VALUE\u0026#39;: for value_id in relationship[\u0026#39;Ids\u0026#39;]: return value_map.get(value_id) return None def get_text(result, blocks_map): \u0026#34;\u0026#34;\u0026#34;Extract text from a block\u0026#34;\u0026#34;\u0026#34; text = \u0026#39;\u0026#39; if \u0026#39;Relationships\u0026#39; in result: for relationship in result[\u0026#39;Relationships\u0026#39;]: if relationship[\u0026#39;Type\u0026#39;] == \u0026#39;CHILD\u0026#39;: for child_id in relationship[\u0026#39;Ids\u0026#39;]: child = blocks_map.get(child_id, {}) if child.get(\u0026#39;BlockType\u0026#39;) == \u0026#39;WORD\u0026#39;: text += child.get(\u0026#39;Text\u0026#39;, \u0026#39;\u0026#39;) + \u0026#39; \u0026#39; elif child.get(\u0026#39;BlockType\u0026#39;) == \u0026#39;SELECTION_ELEMENT\u0026#39;: if child.get(\u0026#39;SelectionStatus\u0026#39;) == \u0026#39;SELECTED\u0026#39;: text += \u0026#39;X \u0026#39; return text.strip() Bước 4: Deploy Code Sau khi paste code, click Deploy Đợi thông báo \u0026ldquo;Changes deployed\u0026rdquo; Code đã được lưu và sẵn sàng chạy Bước 5: Cấu hình Function Settings Click tab Configuration Click General configuration → Edit Thay đổi các cài đặt này: Timeout: 5 minutes (300 giây) Memory: 512 MB Click Save Bước 6: Test Code Syntax Quay lại tab Code Tìm các chỉ báo lỗi màu đỏ trong code Nếu thấy lỗi, kiểm tra lại code đã paste đúng chưa Hiểu về Code Main Function (lambda_handler):\nNhận S3 events khi files được upload Gọi Textract để phân tích tài liệu Lưu kết quả vào DynamoDB Document Validation (is_document_file):\nKiểm tra file upload có phải loại tài liệu được hỗ trợ Ngăn xử lý các file không phải tài liệu Data Extraction (extract_document_data):\nParse Textract response Trích xuất plain text và key-value pairs Tính confidence scores Helper Functions:\nfind_value_block: Liên kết keys với values của chúng get_text: Trích xuất text từ Textract blocks Khắc phục Sự cố Nếu deploy thất bại:\nKiểm tra lỗi syntax (gạch chân đỏ) Đảm bảo tất cả ngoặc và dấu nháy đều khớp Thử copy code lại Nếu timeout errors xảy ra sau:\nTăng timeout lên 10 phút cho tài liệu lớn Cân nhắc tăng memory lên 1024 MB Nếu bạn thấy import errors:\nThư viện boto3 đã được cài đặt sẵn trong Lambda Không cần thêm packages nào cho code này Code bao gồm error handling và logging - kiểm tra CloudWatch Logs nếu có vấn đề!\n"
},
{
	"uri": "/vi/2-document-bot/2.3-configure-trigger/",
	"title": "Cấu hình S3 Trigger",
	"tags": [],
	"description": "",
	"content": "Tổng quan Thiết lập S3 để tự động kích hoạt Lambda function của chúng ta bất cứ khi nào có tài liệu được upload vào bucket.\nHướng dẫn từng bước Bước 1: Thêm trigger vào Lambda function Trong Lambda function document-processor của bạn Cuộn xuống đến phần Function overview Click nút Add trigger Bước 2: Chọn nguồn trigger Trong trang cấu hình trigger Click dropdown Select a source Chọn S3 từ danh sách Bước 3: Cấu hình cài đặt S3 trigger Bucket:\nChọn bucket của bạn: rpa-documents-[your-name] Đây là bucket bạn đã tạo ở Bước 1 Event type:\nChọn All object create events Điều này kích hoạt trên bất kỳ file upload nào (PUT, POST, COPY) Prefix:\nNhập: documents/ Điều này có nghĩa chỉ các files trong thư mục documents/ sẽ kích hoạt function Để trống nếu bạn muốn tất cả uploads đều kích hoạt Bước 4: Xác nhận permissions Bạn sẽ thấy checkbox: I acknowledge that using the same S3 bucket for both input and output is not recommended Tích vào ô này (chúng ta không dùng cùng bucket cho output) Đây chỉ là cảnh báo về best practices Bước 5: Thêm trigger Xem lại cài đặt của bạn: Source: S3 Bucket: rpa-documents-[your-name] Event type: All object create events Prefix: documents/ Click nút Add Bước 6: Xác minh tạo trigger Bạn nên thấy thông báo thành công Trong sơ đồ Function overview, bạn sẽ thấy: S3 bucket kết nối với Lambda function của bạn Trigger bây giờ đã active Bước 7: Kiểm tra cấu hình S3 bucket Vào S3 trong AWS console Mở bucket rpa-documents-[your-name] của bạn Click tab Properties Cuộn xuống đến Event notifications Bạn nên thấy một event notification mới được cấu hình Prefix documents/ giúp tổ chức files và ngăn xử lý nhầm các file không phải tài liệu!\n"
},
{
	"uri": "/vi/2-document-bot/2.4-test-function/",
	"title": "Test Document Processing",
	"tags": [],
	"description": "",
	"content": "Tổng quan Test toàn bộ quy trình xử lý tài liệu bằng cách upload một tài liệu thực và xác minh nó được xử lý tự động.\nHướng dẫn từng bước Bước 1: Chuẩn bị tài liệu test Tạo một PDF đơn giản\nMở bất kỳ word processor nào (Word, Google Docs, v.v.) Tạo một tài liệu đơn giản với: INVOICE Invoice Number: INV-001 Date: January 21, 2025 Customer: John Smith Amount: $100.00 Description: RPA Workshop Test Lưu dưới dạng PDF: test-invoice.pdf Bước 2: Upload tài liệu lên S3 Vào S3 trong AWS Console Mở bucket của bạn: rpa-documents-[your-name] Click vào thư mục documents Click Upload Click Add files và chọn tài liệu test của bạn Click Upload để bắt đầu quá trình Bước 3: Giám sát Lambda execution Vào AWS Lambda console Click vào function document-processor của bạn Click tab Monitor Bạn nên thấy: Recent invocations tăng lên 1 Duration của execution Không có lỗi (hy vọng vậy!) Bước 4: Kiểm tra CloudWatch logs Trong tab Monitor, click View CloudWatch logs Click vào log stream gần đây nhất Tìm các log entries như: Processing document: test-invoice.pdf from bucket: rpa-documents-yourname Successfully processed document: test-invoice.pdf Document ID: [some-uuid] Bước 5: Xác minh dữ liệu trong DynamoDB Vào DynamoDB trong AWS Console Click Tables → rpa-processed-data Click Explore table items Bạn nên thấy một item mới với: document_id: Định danh duy nhất file_name: Tên file bạn đã upload extracted_text: Text được trích xuất từ tài liệu key_value_pairs: Các form fields được tìm thấy processed_at: Timestamp status: \u0026ldquo;completed\u0026rdquo; Bước 6: Xem lại dữ liệu đã trích xuất Click vào DynamoDB item để xem chi tiết:\nextracted_text:\nNên chứa text chính từ tài liệu của bạn Có thể bị cắt ngắn ở 1000 ký tự key_value_pairs:\nNên hiển thị các form fields như: { \u0026#34;Invoice Number\u0026#34;: \u0026#34;INV-001\u0026#34;, \u0026#34;Date\u0026#34;: \u0026#34;January 21, 2025\u0026#34;, \u0026#34;Customer\u0026#34;: \u0026#34;John Smith\u0026#34;, \u0026#34;Amount\u0026#34;: \u0026#34;$100.00\u0026#34; } confidence_score:\nSố giữa 0-100 chỉ độ tin cậy của Textract Càng cao càng tốt (thường 80+ cho tài liệu rõ ràng) Bước 7: Test với các loại tài liệu khác Thử upload các loại tài liệu khác:\nTest 2: File hình ảnh\nChụp ảnh một hóa đơn hoặc form Upload dưới dạng JPG/PNG vào thư mục documents/ Kiểm tra xem nó có xử lý đúng không Test 3: PDF phức tạp\nUpload một tài liệu nhiều trang Kiểm tra thời gian xử lý và kết quả "
},
{
	"uri": "/vi/3-email-bot/",
	"title": "Xây dựng Email Automation Bot",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tạo Lambda function gửi thông báo email tự động khi tài liệu được xử lý, sử dụng Amazon SES.\nNhững gì bạn sẽ xây dựng Lambda function cho email automation Tích hợp với SES để gửi emails Thông báo tự động dựa trên kết quả xử lý tài liệu Kết quả mong đợi Email automation bot gửi tóm tắt xử lý Email HTML đẹp với dữ liệu tài liệu Báo cáo hàng ngày tùy chọn Tích hợp với quy trình xử lý tài liệu Bạn có thể tùy chỉnh email template để bao gồm thêm chi tiết hoặc thay đổi kiểu dáng!\n"
},
{
	"uri": "/vi/3-email-bot/3.1-create-email-lambda/",
	"title": "Tạo Email Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tạo Lambda function thứ hai sẽ gửi thông báo email tự động với báo cáo tóm tắt từ hệ thống RPA của chúng ta.\nHướng dẫn Từng bước Bước 1: Điều hướng đến AWS Lambda Trong AWS Management Console Vào AWS Lambda (bạn sẽ đã ở đây từ bước trước) Bạn sẽ thấy function document-processor hiện có trong danh sách Bước 2: Tạo Function Khác Click nút Create function lần nữa Chúng ta đang tạo Lambda function thứ hai cho email automation Bước 3: Cấu hình Thông tin Cơ bản Function creation method:\nChọn Author from scratch Function name:\nNhập: email-automation-bot Tên này rõ ràng cho biết nó dành cho email automation Runtime:\nChọn Python 3.9 (giống function đầu tiên) Architecture:\nGiữ x86_64 (mặc định) Bước 4: Cấu hình Permissions Execution role:\nChọn Use an existing role Chọn: RPA-Lambda-Role (cùng role như trước) Role này đã có quyền SES và DynamoDB chúng ta cần Bước 5: Cài đặt Tùy chọn Tags (khuyến nghị):\nKey: Project, Value: RPA-Workshop Key: Function, Value: EmailBot Key: Type, Value: Automation Bước 6: Tạo Function Xem lại cài đặt của bạn: Function name: email-automation-bot Runtime: Python 3.9 Execution role: RPA-Lambda-Role Click Create function Đợi tạo hoàn thành Bước 7: Xác minh Function đã Tạo Bạn sẽ thấy thông báo thành công Trạng thái function sẽ là Active Bây giờ bạn có 2 Lambda functions trong tài khoản Bước 8: Cấu hình Function Settings Click tab Configuration Click General configuration → Edit Cập nhật các cài đặt này: Timeout: 2 minutes (120 giây) Memory: 256 MB (ít hơn document processor) Click Save Bước 9: Xác minh Cả Hai Functions Tồn tại Quay lại danh sách Lambda functions Bạn sẽ thấy cả hai functions: ✅ document-processor (để xử lý tài liệu) ✅ email-automation-bot (để gửi emails) Hiểu về Email Bot Function Mục đích:\nGửi emails tóm tắt xử lý Tạo báo cáo HTML với dữ liệu đã trích xuất Cung cấp thông báo về trạng thái hệ thống RPA Tại sao function riêng biệt?\nCơ chế trigger khác nhau (scheduled vs. S3 events) Yêu cầu tài nguyên khác nhau (ít memory hơn) Dễ quản lý và debug riêng biệt Có thể schedule độc lập Yêu cầu Tài nguyên:\nÍt memory hơn document processor (256 MB vs 512 MB) Timeout ngắn hơn (2 phút vs 5 phút) Chủ yếu làm database queries và gửi email Khắc phục Sự cố Nếu tạo function thất bại:\nĐảm bảo bạn dùng cùng IAM role: RPA-Lambda-Role Kiểm tra tên function không xung đột Xác minh bạn có quyền tạo Lambda Nếu không thấy cả hai functions:\nRefresh trang Lambda console Đảm bảo bạn đang ở đúng AWS region Kiểm tra filters danh sách function Nếu cấu hình thất bại:\nThử set timeout và memory từng cái một Đảm bảo giá trị trong giới hạn AWS Refresh và thử lại nếu cần Function Comparison Feature document-processor email-automation-bot Purpose Process documents Send email reports Trigger S3 upload events Scheduled/manual Memory 512 MB 256 MB Timeout 5 minutes 2 minutes Main Services Textract, DynamoDB SES, DynamoDB Bước tiếp theo là gì? Email automation Lambda function của bạn đã sẵn sàng! Tiếp theo, chúng ta sẽ thêm Python code sẽ:\nQuery tài liệu đã xử lý từ DynamoDB Tạo báo cáo email HTML đẹp Gửi thông báo qua Amazon SES Có các functions riêng biệt cho các tác vụ khác nhau là best practice trong kiến trúc serverless!\n"
},
{
	"uri": "/vi/3-email-bot/3.2-add-email-code/",
	"title": "Thêm Email Automation Code",
	"tags": [],
	"description": "",
	"content": "Tổng quan Thêm Python code vào email Lambda function sẽ query tài liệu đã xử lý và gửi báo cáo email HTML đẹp.\nHướng dẫn Từng bước Bước 1: Mở Email Function Code Editor Trong Lambda function email-automation-bot của bạn Đảm bảo bạn đang ở tab Code Bạn sẽ thấy template code Lambda mặc định Bước 2: Xóa Code Mặc định Chọn tất cả code mặc định trong editor Xóa hoàn toàn Editor sẽ trống Bước 3: Thêm Email Automation Code Copy và paste code hoàn chỉnh này:\nimport json import boto3 from datetime import datetime, timedelta # Initialize AWS clients ses = boto3.client(\u0026#39;ses\u0026#39;) dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) def lambda_handler(event, context): \u0026#34;\u0026#34;\u0026#34; Send email notifications for processed documents \u0026#34;\u0026#34;\u0026#34; try: # Get document processing results from DynamoDB table = dynamodb.Table(\u0026#39;rpa-processed-data\u0026#39;) # Get documents from the last 24 hours cutoff_time = (datetime.utcnow() - timedelta(hours=24)).isoformat() response = table.scan( FilterExpression=\u0026#39;processed_at \u0026gt; :cutoff_time\u0026#39;, ExpressionAttributeValues={\u0026#39;:cutoff_time\u0026#39;: cutoff_time} ) recent_documents = response[\u0026#39;Items\u0026#39;] # If no recent documents, send a status email if not recent_documents: recent_documents = get_latest_documents(table, 5) # Get last 5 documents # Generate email content email_content = generate_email_content(recent_documents) # Get recipient email from environment or use default recipient_email = \u0026#34;YOUR_EMAIL@example.com\u0026#34; # Thay bằng email đã xác minh # Send email using SES send_email( subject=\u0026#34;🤖 Báo cáo Xử lý RPA - \u0026#34; + datetime.utcnow().strftime(\u0026#39;%Y-%m-%d\u0026#39;), body=email_content, recipient=recipient_email ) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;message\u0026#39;: \u0026#39;Email sent successfully\u0026#39;, \u0026#39;documents_processed\u0026#39;: len(recent_documents), \u0026#39;recipient\u0026#39;: recipient_email }) } except Exception as e: print(f\u0026#34;Error sending email: {str(e)}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: json.dumps({ \u0026#39;error\u0026#39;: str(e), \u0026#39;message\u0026#39;: \u0026#39;Failed to send email\u0026#39; }) } def get_latest_documents(table, limit=5): \u0026#34;\u0026#34;\u0026#34; Lấy tài liệu gần nhất nếu không tìm thấy tài liệu recent \u0026#34;\u0026#34;\u0026#34; try: response = table.scan() items = response[\u0026#39;Items\u0026#39;] # Sắp xếp theo processed_at timestamp (mới nhất trước) sorted_items = sorted(items, key=lambda x: x.get(\u0026#39;processed_at\u0026#39;, \u0026#39;\u0026#39;), reverse=True) return sorted_items[:limit] except Exception as e: print(f\u0026#34;Lỗi lấy tài liệu mới nhất: {str(e)}\u0026#34;) return [] def generate_email_content(documents): \u0026#34;\u0026#34;\u0026#34; Tạo nội dung HTML email từ tài liệu đã xử lý \u0026#34;\u0026#34;\u0026#34; html_content = f\u0026#34;\u0026#34;\u0026#34; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body {{ font-family: \u0026#39;Segoe UI\u0026#39;, Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }} .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 30px; }} .header h1 {{ margin: 0; font-size: 28px; }} .header p {{ margin: 10px 0 0 0; opacity: 0.9; }} .summary {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 30px; border-left: 4px solid #667eea; }} .document {{ background: white; border: 1px solid #e9ecef; margin: 15px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }} .document h3 {{ color: #495057; margin-top: 0; border-bottom: 2px solid #e9ecef; padding-bottom: 10px; }} .key-value {{ margin: 8px 0; padding: 5px 0; }} .key {{ font-weight: 600; color: #495057; display: inline-block; min-width: 120px; }} .value {{ color: #6c757d; background: #f8f9fa; padding: 2px 8px; border-radius: 4px; }} .confidence {{ background: #d4edda; color: #155724; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }} .footer {{ margin-top: 40px; padding: 20px; background: #e9ecef; border-radius: 8px; text-align: center; color: #6c757d; }} .stats {{ display: flex; justify-content: space-around; margin: 20px 0; }} .stat {{ text-align: center; padding: 15px; }} .stat-number {{ font-size: 24px; font-weight: bold; color: #667eea; }} .stat-label {{ font-size: 12px; color: #6c757d; text-transform: uppercase; }} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;🤖 Báo cáo Xử lý RPA\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Tạo lúc: {datetime.utcnow().strftime(\u0026#39;%d/%m/%Y lúc %H:%M UTC\u0026#39;)}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;summary\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;stats\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;stat\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;stat-number\u0026#34;\u0026gt;{len(documents)}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;stat-label\u0026#34;\u0026gt;Tài liệu đã xử lý\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;stat\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;stat-number\u0026#34;\u0026gt;{calculate_avg_confidence(documents):.1f}%\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;stat-label\u0026#34;\u0026gt;Độ tin cậy TB\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;stat\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;stat-number\u0026#34;\u0026gt;{count_total_extractions(documents)}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;stat-label\u0026#34;\u0026gt;Dữ liệu trích xuất\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; if not documents: html_content += \u0026#34;\u0026#34;\u0026#34; \u0026lt;div class=\u0026#34;document\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;📭 Không có Tài liệu Gần đây\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Không có tài liệu nào được xử lý trong 24 giờ qua. Hệ thống RPA của bạn đã sẵn sàng và đang chờ tài liệu mới!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; else: for i, doc in enumerate(documents[:10]): # Hiển thị tối đa 10 tài liệu file_name = doc.get(\u0026#39;file_name\u0026#39;, \u0026#39;File không xác định\u0026#39;) processed_at = doc.get(\u0026#39;processed_at\u0026#39;, \u0026#39;Không xác định\u0026#39;) confidence = doc.get(\u0026#39;confidence_score\u0026#39;, 0) # Format timestamp try: dt = datetime.fromisoformat(processed_at.replace(\u0026#39;Z\u0026#39;, \u0026#39;+00:00\u0026#39;)) formatted_time = dt.strftime(\u0026#39;%d/%m/%Y lúc %H:%M UTC\u0026#39;) except: formatted_time = processed_at html_content += f\u0026#34;\u0026#34;\u0026#34; \u0026lt;div class=\u0026#34;document\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;📄 {file_name}\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;key-value\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;key\u0026#34;\u0026gt;Xử lý lúc:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;value\u0026#34;\u0026gt;{formatted_time}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;key-value\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;key\u0026#34;\u0026gt;Độ tin cậy:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;confidence\u0026#34;\u0026gt;{confidence}%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; # Thêm key-value pairs đã trích xuất key_values = doc.get(\u0026#39;key_value_pairs\u0026#39;, {}) if key_values and isinstance(key_values, dict): html_content += \u0026#34;\u0026lt;h4\u0026gt;📊 Dữ liệu trích xuất:\u0026lt;/h4\u0026gt;\u0026#34; for key, value in list(key_values.items())[:5]: # Hiển thị 5 cặp key-value đầu html_content += f\u0026#34;\u0026#34;\u0026#34; \u0026lt;div class=\u0026#34;key-value\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;key\u0026#34;\u0026gt;{key}:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;value\u0026#34;\u0026gt;{value}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; html_content += \u0026#34;\u0026lt;/div\u0026gt;\u0026#34; html_content += f\u0026#34;\u0026#34;\u0026#34; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;✅ Trạng thái Hệ thống RPA: Hoạt động\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Hệ thống xử lý tài liệu tự động của bạn đang chạy mượt mà.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Đây là thông báo tự động từ nền tảng RPA trên AWS.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026#34;\u0026#34;\u0026#34; return html_content def calculate_avg_confidence(documents): \u0026#34;\u0026#34;\u0026#34;Tính điểm confidence trung bình\u0026#34;\u0026#34;\u0026#34; if not documents: return 0 confidences = [doc.get(\u0026#39;confidence_score\u0026#39;, 0) for doc in documents] valid_confidences = [c for c in confidences if c \u0026gt; 0] return sum(valid_confidences) / len(valid_confidences) if valid_confidences else 0 def count_total_extractions(documents): \u0026#34;\u0026#34;\u0026#34;Đếm tổng số data points đã trích xuất\u0026#34;\u0026#34;\u0026#34; total = 0 for doc in documents: key_values = doc.get(\u0026#39;key_value_pairs\u0026#39;, {}) if isinstance(key_values, dict): total += len(key_values) return total def send_email(subject, body, recipient): \u0026#34;\u0026#34;\u0026#34; Gửi email bằng Amazon SES \u0026#34;\u0026#34;\u0026#34; try: response = ses.send_email( Source=\u0026#39;YOUR_EMAIL@example.com\u0026#39;, # Thay bằng email đã xác minh Destination={ \u0026#39;ToAddresses\u0026#39;: [recipient] }, Message={ \u0026#39;Subject\u0026#39;: { \u0026#39;Data\u0026#39;: subject, \u0026#39;Charset\u0026#39;: \u0026#39;UTF-8\u0026#39; }, \u0026#39;Body\u0026#39;: { \u0026#39;Html\u0026#39;: { \u0026#39;Data\u0026#39;: body, \u0026#39;Charset\u0026#39;: \u0026#39;UTF-8\u0026#39; } } } ) print(f\u0026#34;Email sent successfully. Message ID: {response[\u0026#39;MessageId\u0026#39;]}\u0026#34;) return response except Exception as e: print(f\u0026#34;Error sending email: {str(e)}\u0026#34;) raise e Bước 4: Cập nhật Email Addresses QUAN TRỌNG: Bạn phải cập nhật địa chỉ email trong code:\nTìm dòng này: recipient_email = \u0026quot;YOUR_EMAIL@example.com\u0026quot; Thay bằng email đã xác minh từ Bước 1.3 Tìm dòng này: Source='YOUR_EMAIL@example.com' Thay bằng cùng email đã xác minh Cả hai phải là cùng địa chỉ email bạn đã xác minh trong SES Bước 5: Deploy Code Sau khi cập nhật email addresses, click Deploy Đợi thông báo \u0026ldquo;Changes deployed\u0026rdquo; Code đã được lưu và sẵn sàng chạy Bước 6: Test Function Click nút Test Chọn Create new test event Event name: test-email Giữ JSON mặc định (function không sử dụng event data) Click Test Kiểm tra email của bạn để xem báo cáo tóm tắt RPA Hiểu về Email Code Tính năng Chính:\nQuery DynamoDB cho tài liệu gần đây Tạo email HTML chuyên nghiệp Bao gồm thống kê và tóm tắt Xử lý trường hợp không có tài liệu gần đây Thiết kế email responsive Nội dung Email:\nThống kê xử lý Chi tiết tài liệu riêng lẻ Preview dữ liệu đã trích xuất Điểm confidence Styling chuyên nghiệp Khắc phục Sự cố Nếu email không đến:\nKiểm tra thư mục spam/junk Xác minh địa chỉ email đúng Kiểm tra giới hạn gửi SES Xem CloudWatch logs để tìm lỗi Nếu function thất bại:\nKiểm tra email addresses đã xác minh trong SES Xác minh quyền DynamoDB table Kiểm tra lỗi syntax trong code Bước tiếp theo là gì? Email automation code của bạn đã sẵn sàng! Tiếp theo, chúng ta sẽ thiết lập scheduling tự động để bạn nhận báo cáo hàng ngày mà không cần can thiệp thủ công.\nEmail bao gồm responsive design và hoạt động tốt trên cả desktop và mobile devices!\n"
},
{
	"uri": "/vi/3-email-bot/3.3-configure-schedule/",
	"title": "Cấu hình Lịch Email",
	"tags": [],
	"description": "",
	"content": "Tổng quan Thiết lập scheduling tự động cho email automation bot bằng Amazon EventBridge (CloudWatch Events) để nhận báo cáo RPA hàng ngày.\nHướng dẫn Từng bước Bước 1: Thêm EventBridge Trigger Trong Lambda function email-automation-bot của bạn Cuộn xuống phần Function overview Click nút Add trigger Bước 2: Chọn EventBridge làm Source Trong trang cấu hình trigger Click dropdown Select a source Chọn EventBridge (CloudWatch Events) từ danh sách Bước 3: Cấu hình EventBridge Rule Rule:\nChọn Create a new rule Điều này sẽ tạo rule scheduling mới riêng cho email bot Rule name:\nNhập: daily-rpa-email-schedule Tên này mô tả chức năng của rule Rule description:\nNhập: Lịch hàng ngày cho báo cáo email RPA Tùy chọn nhưng hữu ích cho documentation Bước 4: Set Schedule Expression Rule type:\nChọn Schedule expression Điều này cho phép chúng ta thiết lập lịch lặp lại Schedule expression:\nNhập: rate(1 day) Có nghĩa function sẽ chạy một lần mỗi ngày Tùy chọn lịch khác:\nrate(12 hours) - Mỗi 12 giờ rate(1 hour) - Mỗi giờ (để testing) cron(0 9 * * ? *) - Mỗi ngày lúc 9:00 AM UTC cron(0 17 * * MON-FRI *) - Các ngày trong tuần lúc 5:00 PM UTC Bước 5: Cấu hình Target Target:\nSẽ tự động hiển thị Lambda function của bạn Nếu không, chọn Lambda function và chọn email-automation-bot Configure input:\nChọn Constant (JSON text) Nhập JSON này: { \u0026#34;source\u0026#34;: \u0026#34;scheduled-event\u0026#34;, \u0026#34;detail-type\u0026#34;: \u0026#34;Daily RPA Report\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;daily\u0026#34; } Bước 6: Thêm Trigger Xem lại cài đặt của bạn: Source: EventBridge (CloudWatch Events) Rule: daily-rpa-email-schedule Schedule: rate(1 day) Target: email-automation-bot Click nút Add Bước 7: Xác minh Trigger đã Tạo Bạn sẽ thấy thông báo thành công Trong sơ đồ Function overview, bạn sẽ thấy: EventBridge kết nối với Lambda function Schedule trigger hiện đã active Bước 9: Kiểm tra EventBridge Console Vào Amazon EventBridge trong AWS Console Click Rules ở menu bên trái Bạn sẽ thấy rule: daily-rpa-email-schedule Click vào để xem chi tiết và chỉnh sửa nếu cần Hiểu về EventBridge Scheduling Schedule Expressions:\nRate expressions: rate(value unit)\nUnits: minute, minutes, hour, hours, day, days Ví dụ: rate(5 minutes), rate(1 hour), rate(7 days) Cron expressions: cron(minute hour day month day-of-week year)\nKiểm soát thời gian chính xác hơn Ví dụ: cron(0 12 * * ? *) (hàng ngày lúc trưa UTC) Time Zones:\nTất cả lịch sử dụng UTC time Cân nhắc timezone local khi set lịch 9 AM ICT = 2 AM UTC Khuyến nghị Schedule Cho Production:\nrate(1 day) - Tóm tắt hàng ngày (khuyến nghị) cron(0 2 * * ? *) - Hàng ngày lúc 9 AM ICT (2 AM UTC) cron(0 10 * * MON-FRI *) - Các ngày trong tuần lúc 5 PM ICT Cho Testing:\nrate(5 minutes) - Mỗi 5 phút (xóa sau khi test) rate(1 hour) - Hàng giờ (cho testing ngắn hạn) Khắc phục Sự cố Nếu tạo trigger thất bại:\nKiểm tra quyền Lambda function Xác minh dịch vụ EventBridge có sẵn trong region Thử tên rule khác nếu có xung đột Nếu emails không gửi theo lịch:\nKiểm tra CloudWatch logs cho scheduled executions Xác minh Lambda function chạy không lỗi Kiểm tra giới hạn và quotas SES Nếu muốn thay đổi lịch:\nVào EventBridge console Tìm rule: daily-rpa-email-schedule Click Edit để sửa schedule expression Quản lý Schedule Để tạm thời disable:\nVào EventBridge console Tìm rule và click Disable Re-enable khi sẵn sàng Để xóa schedule:\nTrong Lambda function, tìm EventBridge trigger Click trigger và chọn Delete Hoặc xóa từ EventBridge console Cân nhắc Chi phí EventBridge pricing:\n14 triệu events đầu tiên mỗi tháng: Miễn phí Events bổ sung: $1.00 per triệu events Email hàng ngày = ~30 events mỗi tháng (trong free tier) Lambda pricing:\nScheduled executions tính vào Lambda usage Execution hàng ngày = ~30 invocations mỗi tháng Tác động chi phí tối thiểu Bước tiếp theo là gì? Email automation của bạn giờ đã hoàn toàn tự động! Hệ thống sẽ:\nChạy hàng ngày vào thời gian đã lên lịch Query tài liệu đã xử lý từ 24 giờ qua Tạo và gửi báo cáo email HTML đẹp Tiếp tục chạy mà không cần can thiệp thủ công Tiếp theo, chúng ta sẽ test toàn bộ hệ thống end-to-end để đảm bảo mọi thứ hoạt động hoàn hảo cùng nhau.\nBắt đầu với báo cáo hàng ngày, sau đó điều chỉnh tần suất dựa trên khối lượng xử lý tài liệu!\n"
},
{
	"uri": "/vi/3-email-bot/3.4-test-email/",
	"title": "Test Hệ thống Email",
	"tags": [],
	"description": "",
	"content": "Tổng quan Test toàn bộ hệ thống email automation để đảm bảo nó tạo và gửi báo cáo đẹp với dữ liệu tài liệu đã xử lý.\nHướng dẫn Từng bước Bước 1: Manual Function Test Trong Lambda function email-automation-bot của bạn Click nút Test trong code editor Nếu bạn chưa tạo test event: Chọn Create new test event Event name: manual-email-test Giữ JSON template mặc định Click Test để thực thi Bước 2: Giám sát Test Execution Xem phần Execution result Tìm: Status: Succeeded (màu xanh) Duration: Sẽ dưới 10 giây Logs: Sẽ hiển thị quá trình gửi email Bước 3: Kiểm tra CloudWatch Logs Click tab Monitor trong Lambda function Click View CloudWatch logs Click log stream gần nhất Tìm log entries như: Email gửi thành công. Message ID: [some-id] Bước 4: Xác minh Email Delivery Kiểm tra hộp thư email (cái bạn đã xác minh trong SES) Tìm email với subject: \u0026ldquo;🤖 Báo cáo Xử lý RPA - [date]\u0026rdquo; Nếu không có trong inbox, kiểm tra thư mục spam/junk Email sẽ đến trong vòng 1-2 phút Bước 5: Xem lại Email Content Mở email và xác minh nó chứa:\nHeader Section:\nHeader gradient chuyên nghiệp Tiêu đề \u0026ldquo;Báo cáo Xử lý RPA\u0026rdquo; Timestamp tạo Statistics Section:\nSố tài liệu đã xử lý Điểm confidence trung bình Tổng data points đã trích xuất Document Details:\nEntries tài liệu riêng lẻ Tên file và thời gian xử lý Điểm confidence Key-value pairs đã trích xuất (preview) Footer:\nChỉ báo trạng thái hệ thống Thông báo đóng chuyên nghiệp Bước 6: Test với Recent Documents Upload tài liệu mới vào S3 bucket (folder documents/) Đợi nó được xử lý (kiểm tra DynamoDB) Chạy email function test lại Xác minh tài liệu mới xuất hiện trong email Bước 7: Test Các Scenarios Khác nhau Test A: Không có tài liệu gần đây\nKhông upload tài liệu nào trong 24+ giờ Chạy email function Sẽ hiển thị thông báo \u0026ldquo;Không có Tài liệu Gần đây\u0026rdquo; Vẫn sẽ bao gồm tài liệu đã xử lý mới nhất Test B: Nhiều tài liệu\nUpload 3-5 tài liệu khác nhau Đợi tất cả được xử lý Chạy email function Sẽ hiển thị tất cả tài liệu với thống kê Bước 8: Test Scheduled Execution Tùy chọn A: Đợi thời gian đã lên lịch\nNếu bạn set lịch hàng ngày, đợi ngày hôm sau Kiểm tra email đến tự động Tùy chọn B: Tạo lịch hàng giờ tạm thời\nThêm EventBridge trigger khác với rate(1 hour) Đợi 1 giờ cho automatic execution Kiểm tra email đến mà không cần manual trigger Xóa hourly trigger sau khi test Khắc phục Sự cố Nếu email không đến:\nKiểm tra thư mục spam/junk trước Xác minh địa chỉ email đúng trong code Kiểm tra SES verified identities Xem CloudWatch logs để tìm lỗi Kiểm tra SES sending statistics Nếu nội dung email sai:\nXác minh DynamoDB có tài liệu đã xử lý Kiểm tra timestamps xử lý tài liệu Tìm lỗi trong email generation code Test với các loại tài liệu khác Nếu formatting bị hỏng:\nKiểm tra HTML syntax trong email template Xác minh CSS styles được đóng đúng Test email trong các email clients khác Kiểm tra ký tự đặc biệt trong document data Tối ưu hóa Hiệu suất Cân nhắc kích thước email:\nTemplate hiện tại hiển thị tối đa 10 tài liệu Mỗi tài liệu hiển thị tối đa 5 key-value pairs Tổng kích thước email thường \u0026lt; 100KB Cân bằng tốt giữa chi tiết và hiệu suất Tối ưu hóa delivery:\nEmails thường deliver trong 30-60 giây SES có tỷ lệ deliverability cao Formatting chuyên nghiệp cải thiện inbox placement Tránh từ spam trigger trong nội dung Advanced Testing Load testing:\nXử lý 20+ tài liệu Chạy email function Xác minh hiệu suất và formatting Error handling testing:\nTạm thời phá quyền DynamoDB Chạy email function Sẽ xử lý lỗi một cách graceful Schedule reliability:\nGiám sát scheduled executions vài ngày Xác minh thời gian delivery nhất quán Kiểm tra có executions bị thiếu không Bước tiếp theo là gì? Chúc mừng! Hệ thống email automation của bạn hoạt động hoàn hảo. Bây giờ bạn có:\nXử lý tài liệu tự động với AI Báo cáo email đẹp với dữ liệu đã trích xuất Tóm tắt hàng ngày được lên lịch Giám sát và thông báo chuyên nghiệp Lưu screenshot của email report đẹp - nó tuyệt vời cho portfolio của bạn!\n"
},
{
	"uri": "/vi/4-cleanup/",
	"title": "Dọn dẹp Tài nguyên",
	"tags": [],
	"description": "",
	"content": "Tổng quan Dọn dẹp tất cả tài nguyên AWS được tạo trong workshop này để tránh phí phát sinh.\nQuan trọng: Điều này sẽ xóa vĩnh viễn tất cả tài nguyên và dữ liệu được tạo trong workshop. Hãy đảm bảo sao lưu bất kỳ dữ liệu quan trọng nào trước khi tiếp tục.\nBước 1: Xóa Lambda Functions Vào AWS Lambda console Chọn và xóa các functions này: document-processor email-automation-bot Bất kỳ Lambda functions nào khác bạn đã tạo Bước 2: Xóa S3 Bucket Vào S3 console Chọn bucket của bạn rpa-documents-[your-name] Click Empty để xóa tất cả objects Xác nhận bằng cách gõ tên bucket Click Delete bucket Xác nhận xóa Bước 3: Xóa DynamoDB Table Vào DynamoDB console Chọn table rpa-processed-data Click Delete Xác nhận bằng cách gõ delete Bước 4: Xóa IAM Role Vào IAM console Click Roles Tìm kiếm RPA-Lambda-Role Chọn và click Delete Xác nhận xóa Bước 5: Xóa SES Verified Email Vào Amazon SES console Click Verified identities Chọn địa chỉ email của bạn Click Delete Bước 6: Xóa CloudWatch Logs Vào CloudWatch console Click Log groups Xóa log groups bắt đầu với /aws/lambda/ Chọn và xóa các log groups liên quan Bước 7: Xóa API Gateway (Nếu đã tạo) Vào API Gateway console Chọn API của bạn (nếu bạn đã tạo) Click Actions → Delete Bước 8: Kiểm tra EventBridge Rules Vào EventBridge console Click Rules Xóa bất kỳ rules nào bạn đã tạo (như daily-rpa-summary) Xác minh cuối cùng Kiểm tra các dịch vụ này để đảm bảo mọi thứ đã được xóa:\n✅ Lambda functions đã xóa ✅ S3 bucket đã xóa ✅ DynamoDB table đã xóa ✅ IAM role đã xóa ✅ CloudWatch logs đã xóa Kiểm tra chi phí Vào AWS Billing Dashboard Kiểm tra phần Bills cho phí tháng hiện tại Hầu hết các dịch vụ sử dụng trong workshop này đều đủ điều kiện free tier Bất kỳ phí nào cũng sẽ tối thiểu (dưới $5) Những gì bạn đã học Chúc mừng! Bạn đã thành công:\n✅ Xây dựng một nền tảng RPA hoàn chỉnh với tích hợp AI ✅ Sử dụng nhiều dịch vụ AWS cùng nhau ✅ Triển khai tự động hóa xử lý tài liệu ✅ Tạo quy trình tự động hóa email ✅ Thiết lập giám sát và logging ✅ Học các thực hành tốt nhất của AWS cho việc dọn dẹp "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]